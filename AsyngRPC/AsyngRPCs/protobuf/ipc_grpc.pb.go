// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpcgrpcClient is the client API for Ipcgrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpcgrpcClient interface {
	SendData(ctx context.Context, opts ...grpc.CallOption) (Ipcgrpc_SendDataClient, error)
}

type ipcgrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewIpcgrpcClient(cc grpc.ClientConnInterface) IpcgrpcClient {
	return &ipcgrpcClient{cc}
}

func (c *ipcgrpcClient) SendData(ctx context.Context, opts ...grpc.CallOption) (Ipcgrpc_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ipcgrpc_ServiceDesc.Streams[0], "/ipcgrpc.Ipcgrpc/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &ipcgrpcSendDataClient{stream}
	return x, nil
}

type Ipcgrpc_SendDataClient interface {
	Send(*IpcRequest) error
	Recv() (*IpcReply, error)
	grpc.ClientStream
}

type ipcgrpcSendDataClient struct {
	grpc.ClientStream
}

func (x *ipcgrpcSendDataClient) Send(m *IpcRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ipcgrpcSendDataClient) Recv() (*IpcReply, error) {
	m := new(IpcReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IpcgrpcServer is the server API for Ipcgrpc service.
// All implementations must embed UnimplementedIpcgrpcServer
// for forward compatibility
type IpcgrpcServer interface {
	SendData(Ipcgrpc_SendDataServer) error
	mustEmbedUnimplementedIpcgrpcServer()
}

// UnimplementedIpcgrpcServer must be embedded to have forward compatible implementations.
type UnimplementedIpcgrpcServer struct {
}

func (UnimplementedIpcgrpcServer) SendData(Ipcgrpc_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedIpcgrpcServer) mustEmbedUnimplementedIpcgrpcServer() {}

// UnsafeIpcgrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpcgrpcServer will
// result in compilation errors.
type UnsafeIpcgrpcServer interface {
	mustEmbedUnimplementedIpcgrpcServer()
}

func RegisterIpcgrpcServer(s grpc.ServiceRegistrar, srv IpcgrpcServer) {
	s.RegisterService(&Ipcgrpc_ServiceDesc, srv)
}

func _Ipcgrpc_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IpcgrpcServer).SendData(&ipcgrpcSendDataServer{stream})
}

type Ipcgrpc_SendDataServer interface {
	Send(*IpcReply) error
	Recv() (*IpcRequest, error)
	grpc.ServerStream
}

type ipcgrpcSendDataServer struct {
	grpc.ServerStream
}

func (x *ipcgrpcSendDataServer) Send(m *IpcReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ipcgrpcSendDataServer) Recv() (*IpcRequest, error) {
	m := new(IpcRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ipcgrpc_ServiceDesc is the grpc.ServiceDesc for Ipcgrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipcgrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipcgrpc.Ipcgrpc",
	HandlerType: (*IpcgrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _Ipcgrpc_SendData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/ipc.proto",
}
